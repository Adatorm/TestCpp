on:
  push:
    tags:
      - 'v*'
jobs:
  

  build:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    matrix:
      include: 
        - name: "Windows"
          os: windows-latest
          extension: ".exe"

        - name: "Linux"
          os: ubuntu-latest
          extension: ""

        - name: "macOS"
          os: macos-latest
          extension: ""

    steps:
      - uses: actions/checkout@v3
      - name: Check cmake
        run: cmake --version
      - name: Configure
        run: cmake -S. -Bbuild -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX=install
      - name: Build
        run: cmake --build build --config "Release" --target all -v
      - name: Run The app
        run: build/TestCpp${{ matrix.config.extension }}

      - name: version
        id: version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
      
      - uses: actions/upload-artifact@master
        name: upload artifacts
        with:
          name: binary_${{ matrix.config.name }}
          path: build/TestCpp_${{ matrix.config.extension }}

  
  create_release:
    needs: build
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

  
  update_release:
    name: update_release
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.config.os }} # we run many different builds
    
    matrix:
      include: 
        - name: "Windows"
          os: windows-latest
          extension: ".exe"

        - name: "Linux"
          os: ubuntu-latest
          extension: ""

        - name: "macOS"
          os: macos-latest
          extension: ""
    steps:
      # checkout of cource
      - name: Checkout code
        uses: actions/checkout@v1
      # ... whatever build and packaging steps you need here
      # and finally do an upload!
      - name: download_artifacts
        uses: actions/download-artifact@master
        with:
          name: binary_${{ matrix.config.name }}
          path: export_${{ matrix.config.name }}


      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          # This is how it will be named on the release page. Put whatever name
          # you like, remember that they need to be different for each platform.
          # You can choose any build matrix parameters. For Rust I use the
          # target triple.
          asset_name: TestCpp_${{ matrix.config.name }}${{ matrix.config.extension }}
          # The path to the file you want to upload.
          asset_path: export_${{ matrix.config.name }}/TestCpp${{ matrix.config.extension }}
          # probably you will need to change it, but most likely you are
          # uploading a binary file
          asset_content_type: application/octet-stream