on:
  push:
    branches:
      - main
jobs:
  
  build:
    strategy:
      matrix:
        include:
          - name: "Windows"
            os: windows-latest
            extension: ".exe"
            build_target: "ALL_BUILD"
            release_path: "build/Release"

          - name: "Linux"
            os: ubuntu-latest
            extension: ""
            build_target: "all"
            release_path: "build"

          - name: "macOS"
            os: macos-latest
            extension: ""
            build_target: "all"
            release_path: "build"

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3


      - uses: robinraju/release-downloader@v1.4
        name: download dependencies
        with: 
          # The source repository path.
          # Expected format {owner}/{repo}
          # Default: ${{ github.repository }}
          repository: Adatorm/ReleaseExample
          
          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true
          
          # The github tag. e.g: v1.0.1
          # Download assets from a specific tag/version
          # tag: ""
          
          # The name of the file to download.
          # Use this field only to specify filenames other than tarball or zipball, if any.
          # Supports wildcard pattern (eg: '*', '*.deb', '*.zip' etc..)
          fileName: release.txt
          
          # Download the attached tarball (*.tar.gz)
          # tarBall: true
          
          # Download the attached zipball (*.zip)
          # zipBall: true
          
          # Relative path under $GITHUB_WORKSPACE to place the downloaded file(s)
          # It will create the target directory automatically if not present
          # eg: out-file-path: "my-downloads" => It will create directory $GITHUB_WORKSPACE/my-downloads
          out-file-path: dep
          
          # Github access token to download files from private repositories
          # https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
          # eg: token: ${{ secrets.MY_TOKEN }}
          token:  ${{ secrets.GITHUB_TOKEN }}

          # The URL of the Github API, only use this input if you are using Github Enterprise
          # Default: "https://api.github.com"
          # Use http(s)://[hostname]/api/v3 to access the API for GitHub Enterprise Server
          # github-api-url: ""
            
      - name: Check cmake
        run: cmake --version
      
      - name: Configure
        run: cmake -S. -Bbuild -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX=install
      
      - name: Build
        run: cmake --build build --config "Release" --target ${{ matrix.build_target }} -v

      - name: list
        run: ls ${{ matrix.release_path }}
      
      - name:
        if: contains('${{ matrix.name }}', 'macOS')
        run: uname -a

      - name: Run The app
        run: ${{ matrix.release_path }}/TestCpp${{ matrix.extension }}

      - name: version
        id: version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: list dependencies
        run: ls dep

      - name: display dependencies
        run: more dep/release.txt
      
      - uses: actions/upload-artifact@master
        name: upload artifacts
        with:
          name: binary_${{ matrix.name }}
          path: ${{ matrix.release_path }}/TestCpp${{ matrix.extension }}

  
  create_release:
    needs: build
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

  
  update_release:
    name: update_release
    needs: create_release # we need to know the upload URL
    
    
    strategy:
      matrix:
        include: 
          - name: "Windows"
            os: windows-latest
            extension: ".exe"

          - name: "Linux"
            os: ubuntu-latest
            extension: ""

          - name: "macOS"
            os: macos-latest
            extension: ""
    runs-on: ${{ matrix.os }} # we run many different builds
    steps:
      # checkout of cource
      - name: Checkout code
        uses: actions/checkout@v1
      # ... whatever build and packaging steps you need here
      # and finally do an upload!
      - name: download_artifacts
        uses: actions/download-artifact@master
        with:
          name: binary_${{ matrix.name }}
          path: export_${{ matrix.name }}


      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          # This is how it will be named on the release page. Put whatever name
          # you like, remember that they need to be different for each platform.
          # You can choose any build matrix parameters. For Rust I use the
          # target triple.
          asset_name: TestCpp_${{ matrix.name }}${{ matrix.extension }}
          # The path to the file you want to upload.
          asset_path: export_${{ matrix.name }}/TestCpp${{ matrix.extension }}
          # probably you will need to change it, but most likely you are
          # uploading a binary file
          asset_content_type: application/octet-stream